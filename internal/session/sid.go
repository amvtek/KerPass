package session

import (
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha256"
	"encoding/binary"
	"sync/atomic"
	"time"
)

const (
	sidMacSize    = 32
	sidTimeStart  = sidMacSize
	sidCountStart = sidTimeStart + 8
	sidSize       = sidMacSize + 8 + 8
)

// Sid is a byte array used as session identifier.
// Sid bytes encode [mac|timestamp|counter]
type Sid [sidSize]byte

// T returns the Sid "timestamp".
func (self Sid) T() int64 {
	return int64(binary.LittleEndian.Uint64(self[sidTimeStart:sidCountStart]))
}

// C returns the Sid "counter".
func (self Sid) C() uint64 {
	return binary.LittleEndian.Uint64(self[sidCountStart:])
}

// SidFactory generates unique Sids.
// It can check time validity and origin of Sid values.
type SidFactory struct {
	clock  Clock
	ids    atomic.Uint64
	secret [32]byte
}

// NewSidFactory instantiates a SidFactory.
// Generated Sid expires after lifetime.
// NewSidFactory errors if lifetime is invalid.
func NewSidFactory(lifetime time.Duration) (*SidFactory, error) {
	rv := &SidFactory{}
	err := rv.clock.Init(lifetime / numSlot)
	if nil != err {
		return nil, wrapError(err, "failed clock initialization")
	}
	rand.Read(rv.secret[:])

	return rv, nil
}

// New returns a new Sid different from Sid returned by previous calls.
func (self *SidFactory) New() Sid {
	sid := Sid{}

	tail := sid[sidMacSize:]
	binary.LittleEndian.PutUint64(tail, uint64(self.clock.T()))
	binary.LittleEndian.PutUint64(tail[8:], self.ids.Add(1))

	hm := hmac.New(sha256.New, self.secret[:])
	hm.Write(tail)
	hm.Sum(sid[:0])

	return sid

}

// Check errors if sid was not generated by the SidFactory or if sid has expired.
func (self *SidFactory) Check(sid Sid) error {
	// check if sid has expired
	if sid.T() <= (self.clock.T() - numSlot) {
		return wrapError(ErrKeyExpired, "invalid session key")
	}

	// check if sid was emitted by self
	ctrlsid := sid
	hm := hmac.New(sha256.New, self.secret[:])
	hm.Write(sid[sidMacSize:])
	hm.Sum(ctrlsid[:0])
	if sid != ctrlsid {
		return wrapError(ErrKeyTampered, "invalid session key")
	}

	return nil
}

var _ KeyFactory[Sid] = &SidFactory{}
